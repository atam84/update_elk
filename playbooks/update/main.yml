---

- name: '[o_0] - Upgrade {{ target_hosts }}'
  hosts: "{{ target_hosts }}"
  become: yes
  gather_facts: no
  serial: "{{ parallel_host|default(1)|int }}"
  vars_files:
  tasks:
    #
    #
    # Load main.yml variable
    - name: "{{ target_hosts|upper }} - Include defaults global vars"
      include_vars:
        file: "../../vars/main.yml"

    #
    #
    # this section allow you to load specific vars to overwrite the global vars in vars/main.yml and set values for all services
    - name: "{{ target_hosts|upper }} - Include global vars global.yml if exist this overwrite the global vars"
      include_vars:
        file: "../../vars/services/{{ service }}/global.yml"
      ignore_errors: true

    #
    #
    # this section allow you to load specific vars to overwrite the global vars in vars/main.yml or the global vars of all services global.yml
    - name: "{{ target_hosts|upper }} - Include global vars {{ target_hosts }}_global.yml if exist this overwrite the global vars"
      include_vars:
        file: "../../vars/services/{{ service }}/{{ target_hosts }}_global.yml"
      ignore_errors: true


    #
    # WILL BE DELETED
    # display file_directory when debug mode is active
    #- debug:
    #    var: file_directory|default('not used')
    #  when: activate_debug|default(false)|bool == true
    #
    #
    # WILL BE DELETED
    # display files when debug mode is active
    #- debug:
    #    var: files|default('not used')
    #  when: activate_debug|default(false)|bool == true

    #
    #
    # load all services definition from ../../vars/services/<service_name>.yml in {{ target_hosts }} variable
    - name: "{{ target_hosts|upper }} - Loading all services definition for {{ target_hosts }}"
      include_vars: 
        file: "../../vars/services/{{ service }}/{{ target_hosts }}.yml"
        name: "{{ target_hosts }}"

    #
    #
    # copy {{ target_hosts }} into services var more simple to use and more clear to understand
    - set_fact:
        services: "{{ lookup('vars', target_hosts) }}"

    #
    # WILL BE DELETED
    # display the values in services variable
    #- name: "Debug {{ target_hosts }}"
    #  debug:
    #    var: services
    #  when: activate_debug|default(false)|bool == true

    #
    #
    # Load the existing services in the server
    - name: "{{ target_hosts|upper }} - Load ansible service facts"
      service_facts:

    #
    #
    # trigger stop_services.yml for each service 
    - name: "{{ target_hosts|upper }} - Stop services"
      include_tasks: stop_services.yml
      loop: "{{ services.stop_services }}"
      loop_control:
        loop_var: service_item


    ###########################################################################################################
    #
    #  here we can add specific tasks or include specific playbook when the services are stopped
    #
    #

    # do the system update
    - name: "{{ target_hosts|upper }} - Update OS"
      include_tasks: update_os.yml
      when: update_os|default(false)|bool == true

    #
    # we need to stop service again if the server is rebooted
    # trigger stop_services.yml for each service 
    - name: "{{ target_hosts|upper }} - Stop services after system update when reboot server is defined"
      include_tasks: stop_services.yml
      loop: "{{ services.stop_services }}"
      loop_control:
        loop_var: service_item
      when: 
        - update_os|default(false)|bool == true
        - reboot_after_os_update|default(false)|bool == true
    
    # do the package installation
    - name: "{{ target_hosts|upper }} - Install Elasticsearch stack + beats"
      include_tasks: elk_stack_installer.yml
      when: install_elk_stack|default(false)|bool == true

    #
    #
    #
    ###########################################################################################################


    #
    #
    # Reboot servers if needed
    - block:
        - name: "{{ target_hosts|upper }} - Reboot servers"
          reboot:
            msg: "We reboot that servers."

        - name: "{{ target_hosts|upper }} - waiting the servers to become reachable"
          wait_for_connection:
            connect_timeout: "{{ reboot_connect_timeout }}"
            delay: "{{ reboot_delay }}"
        
      when: services.reboot_the_server_after_the_upgrade|default(false)|bool == true

    #
    #
    # Restart services, even when the server is rebooted the services will be restarted if services.restar_services_after_the_upgrade = true
    - name: "{{ target_hosts|upper }} - Bring services up"
      include_tasks: start_services.yml
      loop: "{{ services.stop_services }}"
      loop_control:
        loop_var: service_item
      when: services.restar_services_after_the_upgrade|default(false)|bool == true


    #
    #
    # In the case of upgrade in manual execution ask if we want to go to the next server
    - pause:
        prompt: "Do you want continu with the next server [ yes/no ]"
        echo: yes
      register: result_do_next
      when: execution_manual|default(false)|bool == true

    - name: "{{ target_hosts|upper }} - Breaking the exetion" 
      fail:
        msg: "Breaking the exetion"
      when: 
        - execution_manual|default(false)|bool == true
        - result_do_next|default(true)|bool == false